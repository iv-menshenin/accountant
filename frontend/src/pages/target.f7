<template>
  <div class="popup">
    <div class="view">
      <div class="page" data-name="target">
        <div class="navbar">
          <div class="navbar-bg"></div>
          <div class="navbar-inner">
            <div class="title">
              ${$f7route.name === 'new_target' ?
                'Новый взнос' :
                'Взнос' + (targetData.value.type ? ` "${targetData.value.type}"` : '')
              }
            </div>
            <div class="right">
              <a class="link popup-close">
                <i class="icon f7-icons">multiply</i>
              </a>
            </div>

            <!-- <div class="subnavbar">
              <form class="searchbar">
                <div class="searchbar-inner">
                  <div class="searchbar-input-wrap">
                    <input type="search" placeholder="Search" />
                    <i class="searchbar-icon"></i>
                    <span class="input-clear-button"></span>
                  </div>
                  <span class="searchbar-disable-button if-not-aurora">Cancel</span>
                </div>
              </form>
            </div> -->
          </div>
        </div>

        <div class="tabs-animated-wrap">
          <div class="tabs">
            <form class="page-content tab tab-active" id="target-info" @submit=${saveTargetData}>
              <div class="list">
                <ul>
                  <li>
                    <div class="item-content item-input">
                      <div class="item-inner">
                        <div class="item-title item-label">Тип</div>
                        <div class="item-input-wrap ${loading.value && 'skeleton-effect-wave'}">
                          <input type="text" name="type" value=${targetData.value.type} placeholder="Ежегодный" autocomplete="off" required validate disabled=${saving.value || $f7route.name === 'target'} @invalid=${() => $el.value.find('.page-content').scrollTop(0, 300)} />
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="item-content item-input">
                      <div class="item-inner">
                        <div class="item-title item-label">Период</div>
                        <div class="item-input-wrap">
                          <input type="text" name="period" placeholder="Период" readonly="readonly" disabled=${saving.value} />
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="item-content item-input">
                      <div class="item-inner">
                        <div class="item-title item-label">Сумма, ₽</div>
                        <div class="item-input-wrap">
                          <input type="number" name="cost" value=${targetData.value.cost} min="0" step="0.01" name="cost" placeholder="1000" required validate />
                        </div>
                      </div>
                    </div>
                  </li>
                  <li class="item-content item-input">
                    <div class="item-inner">
                      <div class="item-title item-label">Комментарий</div>
                      <div class="item-input-wrap ${loading.value && 'skeleton-effect-wave'}">
                        <textarea class="resizable" name="comment" value=${targetData.value.comment} placeholder="Дополнительная информация" disabled=${saving.value}></textarea>
                      </div>
                    </div>
                  </li>
                  <li class=${$f7route.name === 'new_target' && 'display-none'}>
                    <div class="item-content item-input">
                      <div class="item-inner">
                        <div class="item-title item-label">Дата закрытия</div>
                        <div class="item-input-wrap ${loading.value && 'skeleton-effect-wave'}">
                          <input type="text" name="closed" placeholder="03.02.2020" disabled=${saving.value} readonly />
                        </div>
                      </div>
                    </div>
                  </li>
                </ul>
              </div>

              <div class="block">
                <button type="submit" class="button button-fill button-large button-preloader ${saving.value && 'button-loading disabled'}">
                  <div class="preloader">
                    <span class="preloader-inner">
                      <span class="preloader-inner-circle"></span>
                    </span>
                  </div>
                  <span>Сохранить</span>
                </button>

                ${$f7route.name === 'target' && $h`
                  <button type="button" class="button button-large color-red  margin-top" @click=${deleteTarget}>Удалить</button>
                `}
              </div>
            </form>

            <div class="page-content tab" id="target-bills" @tab:show=${targetBillsShowed}>
              <div class="block-title" id="all-accounts-checkbox-block">
                <label class="checkbox margin-horizontal">
                  <input type="checkbox" name="all-accounts-checkbox" />
                  <i class="icon-checkbox"></i>
                </label>

                ${getTotalChecked() === accounts.length - bills.length ? $h`
                  <span id="all-accounts-label">Снять все</span>
                ` : $h`
                  <span id="all-accounts-label">Выбрать все</span>
                `}
              </div>

              ${accountsLoading.value && $h`
                <div class="list media-list medium-inset">
                  <ul>
                    ${[1, 2, 3].map(() => $h`
                      <li>
                        <label class="item-checkbox item-content skeleton-effect-wave">
                          <input type="checkbox" disabled />
                          <i class="icon icon-checkbox"></i>
                          <div class="item-media">
                            <div class="item-icon skeleton-block"></div>
                          </div>
                          <div class="item-inner skeleton-text">
                            <div class="item-title-row">
                              <div class="item-title">Number</div>
                            </div>
                            <div class="item-subtitle">Account Persona Fullname</div>
                            <div class="item-text">Lorem ipsum dolor sit amet</div>
                          </div>
                        </label>
                      </li>
                    `)}
                  </ul>
                </div>
              `}

              <div class="list virtual-list media-list chevron-center searchbar-found medium-inset" id="account-list"></div>
            </div>
          </div>
        </div>

        <div class="fab fab-extended fab-right-bottom color-teal hidden">
          <a href="#" @click=${createBills}>
            <i class="icon f7-icons">checkmark_alt</i>
            <div class="fab-text">Сформировать</div>
          </a>
          <span class="badge color-white text-color-teal">${getTotalChecked()}</span>
        </div>

        <div class="toolbar tabbar toolbar-bottom">
          <div class="toolbar-inner">
            <a href="#target-info" data-tab="#target-info" class="tab-link tab-link-active">Карточка взноса</a>
            <a href="#target-bills" data-tab="#target-bills" class="tab-link">Счета на оплату</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style>
.page[data-name="target"] {
  /* --f7-page-subnavbar-offset: var(--f7-subnavbar-height); */
  --f7-page-toolbar-bottom-offset: var(--f7-toolbar-height);
}
.page[data-name="target"] .page-content[id="target-bills"] {
  padding: 0;
  margin-top: calc(var(--f7-page-navbar-offset, 0px) + var(--f7-page-toolbar-top-offset, 0px) + var(--f7-page-subnavbar-offset, 0px) + var(--f7-page-searchbar-offset, 0px) + var(--f7-page-content-extra-padding-top, 0px));
  margin-bottom: calc(var(--f7-page-toolbar-bottom-offset, 0px) + var(--f7-safe-area-bottom) + var(--f7-page-content-extra-padding-bottom, 0px));
}
.page[data-name="target"] input[type="checkbox"][disabled] + .icon-checkbox {
  opacity: 0.5;
}
.page[data-name="target"] .fab {
  bottom: calc(var(--f7-fab-margin) + var(--f7-toolbar-height));
  transition: right .3s;
}
.page[data-name="target"] .fab.hidden {
  right: -100%;
}
.page[data-name="target"] .fab .badge {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 1;
  border: 2px solid var(--f7-color-teal);
}
</style>

<script>
export default (props, { $f7router, $f7route, $on, $f7, $ref, $el, $update, $ }) => {
  const monthes = 'Январь Февраль Март Апрель Май Июнь Июль Август Сентябрь Октябрь Ноябрь Декабрь'.split(' ');
  const targetData = $ref({});
  const loading = $ref(false);
  const accountsLoading = $ref(false);
  const billsLoading = $ref(false);
  const saving = $ref(false);
  let closedDateCalendar;
  let periodPicker;
  let accounts = [];
  let bills = [];
  let virtualList;

  $on('popupInit', async () => {
    initForm();
    initVirtualList();

    if ($f7route.name === 'new_target') {
      $f7.toolbar.hide($el.value.find('.toolbar')[0], false);
    }

    if (props.targetId) {
      try {
        loading.value = true;
        await getTargetData();
      } catch (error) {
        console.error(error);
      } finally {
        loading.value = false;
      }
    }
  });

  function initForm() {
    const today = new Date();

    periodPicker = $f7.picker.create({
      inputEl: 'input[name="period"]',
      openIn: 'popover',
      rotateEffect: true,
      value: [
        today.getMonth(),
        today.getFullYear(),
      ],
      formatValue: function (values, displayValues) {
        return monthes[values[0]] + ' ' + values[1];
      },
      cols: [
        // Months
        {
          values: ('0 1 2 3 4 5 6 7 8 9 10 11').split(' '),
          displayValues: monthes,
          textAlign: 'right'
        },
        // Years
        {
          values: (function () {
            const arr = [];
            for (let i = 1950; i <= 2050; i++) { arr.push(i); }
            return arr;
          })(),
        },
      ],
    });

    closedDateCalendar = $f7.calendar.create({
      inputEl: 'input[name="closed"]',
      closeOnSelect: true,
      inputReadOnly: false,
      openIn: 'popover',
    });
  }

  function getTargetData() {
    return new Promise((resolve, reject) => {
      $f7.request.json(`/api/targets/${props.targetId}`, (data, status, xhr) => {
        targetData.value = data.data;

        periodPicker.setValue([targetData.value.period.month - 1, targetData.value.period.year]);
        resolve();
      }, (xhr, status, message) => {
        if (status !== 401) {
          reject(`${status}: ${message}`);
        }
      });
    });
  }

  async function saveTargetData(event) {
    event.preventDefault();

    const { type, ...data } = $f7.form.convertToData(event.target);
    data.closed = Boolean(data.closed) ? agreementDateCalendar.value[0].toISOString() : '';
    data.cost = Number(data.cost);
    data.period = {
      month: Number(periodPicker.value[0]) + 1,
      year: Number(periodPicker.value[1]),
    };

    for (let property in data) {
      if (data.hasOwnProperty(property)) {
        if (data[property] ===  '') {
          delete data[property];
        }
      }
    }

    try {
      saving.value = true;

      const response = await new Promise((resolve, reject) => {
        $f7.request({
          method: $f7route.name === 'target' ? 'PUT' : 'POST',
          url: '/api/targets' + ($f7route.name === 'target' ? `/${targetData.value.target_id}` : '') + `?type=${encodeURI(type)}`,
          data,
          contentType: 'application/json',
          dataType: 'json',
          success: resolve,
          error: (xhr, status, message) => {
            if (status !== 401) {
              reject(`${status}: ${message}`);
            }
          },
        });
      });

      targetData.value = response.data;

      if ($f7route.name === 'target') {
        // updated
        $f7.emit('target:update', targetData.value);
      } else {
        // created
        $f7router.updateCurrentUrl(`/targets/${targetData.value.target_id}/`);
        $f7route.name = 'target';
        $f7.emit('target:create', targetData.value);
        $f7.toolbar.show($el.value.find('.toolbar')[0]);
      }

      $f7.toast.create({
        text: 'Сохранено',
        position: 'center',
        closeTimeout: 2000,
        destroyOnClose: true,
        icon: '<i class="f7-icons">checkmark</i>',
      }).open();
    } catch (error) {
      console.error(error);
    } finally {
      saving.value = false;
    }
  }

  function deleteTarget() {
    $f7.dialog.create({
      title: `Удалить взнос "${targetData.value.type}"?`,
      text: 'Это действие нельзя будет отменить',
      buttons: [
        {
          text: 'Отмена',
          cssClass: 'dialog-second-button',
        },
        {
          text: 'Удалить',
          color: 'red',
          onClick: () => {
            $f7.preloader.show();

            $f7.request({
              method: 'DELETE',
              url: `/api/targets/${targetData.value.target_id}`,
              success: (data, status, xhr) => {
                $f7.emit('target:delete', targetData.value.target_id);
                $f7.preloader.hide();
                $f7.popup.close($el.value, true);
              },
              error: (xhr, status, message) => {
                if (status !== 401) $f7.preloader.hide();
              },
            });
          },
        },
      ],
      destroyOnClose: true,
    }).open();
  }

  function initVirtualList() {
    virtualList = $f7.virtualList.create({
      el: $el.value.find('#account-list'),
      items: accounts,
      searchAll: (query, items) => {
        let found = [];
        for (let i = 0; i < items.length; i++) {
          const displayItem = !bills.some((bill) => bill.object_id === items[i].object_id) &&
            (query.trim() === '' ||
            items[i].account.toLowerCase().indexOf(query.toLowerCase()) >= 0);

          if (displayItem) {
            found.push(i)
          }
        }
        return found; //return array with mathced indexes
      },
      renderItem(item) {
        const bill = bills.find((bill) => bill.object_id === item.object_id);
        return `
          <li>
            <label class="item-checkbox item-content">
              <input type="checkbox" name="account-checkbox" value="${item.object_id}" ${Boolean(bill) && 'checked disabled'} ${item.checked && 'checked'} />
              <i class="icon icon-checkbox"></i>
              <div class="item-media">
                <div class="item-icon bg-color-primary">
                  <i class="icon f7-icons">skew</i>
                </div>
              </div>
              <div class="item-inner">
                <div class="item-title-row">
                  <div class="item-title">${`<span>${item.street}, ${item.number}</span>`}</div>
                  <div class="item-after">${Boolean(bill) ? (bill.bill.toLocaleString() + ' ₽') : ''}</div>
                </div>
                ${item.persons && item.persons.length > 0 ? `
                  <div class="item-subtitle">
                    <span>${item.persons[0].surname} ${item.persons[0].name} ${item.persons[0].pat_name}</span>
                    ${item.persons[0].is_member ? `
                      <i class="icon f7-icons color-blue" style="font-size: 1em">checkmark_seal_fill</i>
                    ` : ''}
                    ${item.persons.length > 1 ? `
                      <span>, +${item.persons.length - 1}</span>
                    ` : ''}
                  </div>
                ` : `
                  <div class="item-subtitle">Нет владельцев</div>
                `}
              </div>
            </label>
          </li>
        `;
      },
      height: 77,
    });

    $el.value.find('input[name="all-accounts-checkbox"]').on('change', (event) => {
      const noBillsList = accounts.filter((account) => !bills.some((bill) => bill.object_id === account.object_id));
      noBillsList.forEach((item) => item.checked = event.target.checked);
      virtualList.clearCache();
      virtualList.update();

      if (noBillsList[0].checked) {
        $el.value.find('.fab').removeClass('hidden');
      } else {
        $el.value.find('.fab').addClass('hidden');
      }

      $update();
    });

    $el.value.on('change', 'input[name="account-checkbox"]', (event) => {
      accounts.find((account) => account.object_id === event.target.value).checked = event.target.checked;
      const totalChecked = getTotalChecked();

      if (totalChecked === 0) {
        $el.value.find('input[name="all-accounts-checkbox"]').prop('checked', false);
        $el.value.find('input[name="all-accounts-checkbox"]').prop('indeterminate', false);
      } else if (totalChecked === accounts.length - bills.length) {
        $el.value.find('input[name="all-accounts-checkbox"]').prop('checked', true);
        $el.value.find('input[name="all-accounts-checkbox"]').prop('indeterminate', false);
      } else {
        $el.value.find('input[name="all-accounts-checkbox"]').prop('indeterminate', true);
      }

      if (totalChecked === 0) {
        $el.value.find('.fab').addClass('hidden');
      } else {
        $el.value.find('.fab').removeClass('hidden');
      }

      $update();
    });
  }

  function getTotalChecked() {
    const noBillsList = accounts.filter((account) => !bills.some((bill) => bill.object_id === account.object_id));
    return noBillsList.filter((item) => item.checked).length;
  }

  function targetBillsShowed() {
    if (accounts.length === 0) {
      loadAccounts();
    }

    loadBills();
  }

  function loadAccounts() {
    accountsLoading.value = true;

    $f7.request.json('/api/accounts', (data, status, xhr) => {
      accounts = data.data.reduce((list, item) => {
        if (item.objects && item.objects.length > 0) {
          item.objects.forEach((object) => {
            list.push($f7.utils.extend({}, item, object));
          });
        }

        return list;
      }, []);
      accountsLoading.value = false;
      virtualList.appendItems(accounts);

      if (accounts.length === bills.length) {
        $el.value.find('#all-accounts-checkbox-block').css('display', 'none');
      }
    }, (xhr, status, message) => {
      if (status !== 401) accountsLoading.value = false;
    });
  }

  function loadBills() {
    billsLoading.value = true;

    $f7.request.json(`/api/bills?target_id=${props.targetId || targetData.value.target_id}`, (data, status, xhr) => {
      bills = data.data;
      billsLoading.value = false;
      virtualList.clearCache();
      virtualList.update();

      if (accounts.length === bills.length) {
        $el.value.find('#all-accounts-checkbox-block').css('display', 'none');
      }
    }, (xhr, status, message) => {
      if (status !== 401) billsLoading.value = false;
    });
  }

  function createBills() {
    $f7.dialog.create({
      title: 'Сформировать счета?',
      text: `Будет сформировано счетов на оплату: ${getTotalChecked()}`,
      buttons: [
        {
          text: 'Отмена',
          cssClass: 'dialog-second-button',
        },
        {
          text: 'Сформировать',
          onClick: async () => {
            let progress = 0;
            const dialog = $f7.dialog.progress('Формирование счетов', progress);
            const checkedAccounts = accounts.filter((account) => !bills.some((bill) => bill.object_id === account.object_id)).filter((item) => item.checked);
            const total = checkedAccounts.length;
            dialog.setText(`Сформировано 0 из ${total}`);

            while (checkedAccounts.length > 0) {
              const batch = checkedAccounts.splice(0, 10);
              const response = await Promise.all(batch.map((account) => new Promise((resolve, reject) => {
                const newBill = {
                  formed: new Date().toISOString(),
                  period: targetData.value.period,
                  object_id: account.object_id,
                  target: {
                    target_id: targetData.value.target_id,
                    type: targetData.value.type,
                  },
                  bill: targetData.value.cost,
                };

                $f7.request({
                  method: 'POST',
                  url: `/api/accounts/${account.account_id}/bills`,
                  data: newBill,
                  contentType: 'application/json',
                  dataType: 'json',
                  success: resolve,
                  error: (xhr, status, message) => {
                    if (status !== 401) {
                      reject(`${status}: ${message}`);
                    }
                  },
                });
              })));

              progress = (total - checkedAccounts.length) / total * 100;
              dialog.setProgress(progress);
              dialog.setText(`Сформировано ${total - checkedAccounts.length} из ${total}`);

              response.forEach((item) => bills.push(item.data));
            }

            dialog.close();
            virtualList.clearCache();
            virtualList.update();

            $el.value.find('input[name="all-accounts-checkbox"]').prop('checked', false);
            $el.value.find('input[name="all-accounts-checkbox"]').prop('indeterminate', false);
            $el.value.find('.fab').addClass('hidden');
            const noBillsList = accounts.filter((account) => !bills.some((bill) => bill.object_id === account.object_id)).forEach((item) => item.checked = false);
            $update();
          },
        },
      ],
      destroyOnClose: true,
    }).open();
  }

  $on('popupBeforeDestroys', () => {
    periodPicker.destroy();
    closedDateCalendar.destroy();
  });

  return $render;
};
</script>
